}
library(shiny)
library(leaflet)
ui <- fluidPage(
leafletOutput("unescoMap"), selectInput("site",
"Select a site",
choices = levels(unesco$name_en),
selected = levels(unesco$name_en)[2]))
server <- function(input,output,session){
# The standard map we had, no surprises
output$unescoMap <- renderLeaflet({
unesco %>%
leaflet %>% setView(lng = -99.1013, lat = 19.2465, zoom = 5) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(name_en))
})
## A reactive object: filtering out the data from the chosen site
chosenSite <- reactive({
desc <- unesco%>%filter(name_en==input$site)
desc
})
## An observer event for the map: This looks on what has changed on the map and redraws accordingly
observe({
proxy <- leafletProxy("unescoMap", data=chosenSite())%>%
removeMarker("chosen")%>%
addCircleMarkers(~longitude, ~latitude,
color = "red", stroke = F,
fillOpacity = 0.7,
popup = ~as.character(name_en), layerId = "chosen")
})
}
library(shiny)
library(leaflet)
ui <- fluidPage(
leafletOutput("unescoMap"), selectInput("site",
"Select a site",
choices = levels(unesco$name_en),
selected = levels(unesco$name_en)[2]))
server <- function(input,output,session){
# The standard map we had, no surprises
output$unescoMap <- renderLeaflet({
unesco %>%
leaflet %>% setView(lng = -99.1013, lat = 19.2465, zoom = 5) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(name_en))
})
## A reactive object: filtering out the data from the chosen site
chosenSite <- reactive({
desc <- unesco%>%filter(name_en==input$site)
desc
})
## An observer event for the map: This looks on what has changed on the map and redraws accordingly
observe({
proxy <- leafletProxy("unescoMap", data=chosenSite())%>%
removeMarker("chosen")%>%
addCircleMarkers(~longitude, ~latitude,
color = "red", stroke = F,
fillOpacity = 0.7,
popup = ~as.character(name_en), layerId = "chosen")
})
}
library(shiny)
library(leaflet)
############################ UI LOGIC ############################
ui <- fluidPage(
leafletOutput("unescoMap"), selectInput("site",
"Select a site",
choices = levels(unesco$name_en),
selected = levels(unesco$name_en)[2]))
############################  SERVER LOGIC ############################
server <- function(input,output,session){
# The standard map we had, no surprises
output$unescoMap <- renderLeaflet({
unesco %>%
leaflet %>% setView(lng = -99.1013, lat = 19.2465, zoom = 5) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(name_en))
})
## A reactive object: filtering out the data from the chosen site
chosenSite <- reactive({
desc <- unesco%>%filter(name_en==input$site)
desc
})
## An observer event for the map: This looks on what has changed on the map and redraws accordingly
observe({
proxy <- leafletProxy("unescoMap", data=chosenSite())%>%
removeMarker("chosen")%>%
addCircleMarkers(~longitude, ~latitude,
color = "red", stroke = F,
fillOpacity = 0.7,
popup = ~as.character(name_en), layerId = "chosen")
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
############################ UI LOGIC ############################
ui <- fluidPage(
leafletOutput("unescoMap"), selectInput("site",
"Select a site",
choices = levels(unesco$name_en),
selected = levels(unesco$name_en)[2]))
############################  SERVER LOGIC ############################
server <- function(input,output,session){
# The standard map we had, no surprises
output$unescoMap <- renderLeaflet({
unesco %>%
leaflet %>% setView(lng = -99.1013, lat = 19.2465, zoom = 5) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(name_en))
})
## A reactive object: filtering out the data from the chosen site
chosenSite <- reactive({
desc <- unesco%>%filter(name_en==input$site)
desc
})
## An observer event for the map: This looks on what has changed on the map and redraws accordingly
observe({
leafletProxy("unescoMap", data=chosenSite())%>%
removeMarker("chosen")%>%
addCircleMarkers(~longitude, ~latitude,
color = "red", stroke = F,
fillOpacity = 0.7,
popup = ~as.character(name_en), layerId = "chosen")
})
}
shinyApp(ui, server)
unesco %>%
leaflet %>% setView(lng = -99.1013, lat = 19.2465, zoom = 5) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude #, popup = ~as.character(name_en)
)
library(shiny)
library(leaflet)
############################  UI LOGIC ############################
ui <- fluidPage(
leafletOutput("unescoMap"), selectInput("site",
"Select a site",
choices = levels(unesco$name_en),
selected = levels(unesco$name_en)[2]))
############################  SERVER LOGIC ############################
server <- function(input,output,session){
# The standard map we had, no surprises
output$unescoMap <- renderLeaflet({
unesco %>%
leaflet %>% setView(lng = -99.1013, lat = 19.2465, zoom = 5) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(name_en))
})
## A reactive object: filtering out the data from the chosen site
chosenSite <- reactive({
desc <- unesco%>%filter(name_en==input$site)
desc
})
## An observer event for the map: This looks on what has changed on the map and redraws accordingly
observe({
proxy <- leafletProxy("unescoMap", data=chosenSite())%>%
removeMarker("chosen")%>%
addCircleMarkers(~longitude, ~latitude,
color = "red", stroke = F,
fillOpacity = 0.7,
popup = ~as.character(name_en), layerId = "chosen")
})
}
shinyApp(ui, server)
library(rgdal)
library(rgeos)
library(maptools)
## TRENDS BY STATE (Lecture 4)
mexico <- readOGR(dsn="./",layer ="mexstates", encoding = "UTF-8")
library(rgdal)
library(rgeos)
library(maptools)
## TRENDS BY STATE (Lecture 4)
mexico <- readOGR(dsn="./dashboard_app/",layer ="mexstates", encoding = "UTF-8")
hoteles <- read.csv("hoteles.csv")
library(rgdal)
library(rgeos)
library(maptools)
## TRENDS BY STATE (Lecture 4)
mexico <- readOGR(dsn="./dashboard_app/",layer ="mexstates", encoding = "UTF-8")
hoteles <- read.csv("./dashboard_app/hoteles.csv")
hoteles[3:9] <- sapply(hoteles[3:9], function(x) as.numeric(as.character(x))/1000)
head(hoteles)
head(mexico@data)
sample <- hoteles%>%
filter(Ano==Total_Visitors) %>%
rename(id=Estado) %>%
mutate_(indicator = Total_Visitors)
sample <- hoteles%>%
filter(Ano==2014) %>%
rename(id=Estado) %>%
mutate_(indicator = Total_Visitors)
sample <- hoteles%>%
filter(Ano==2014) %>%
rename(id=Estado) %>%
mutate(indicator = Total_Visitors)
sample <- hoteles%>%
filter(Ano==2014) %>%
rename(id=Estado) %>%
mutate(indicator = Total_Visitors)
sample <- hoteles%>%
filter(Ano==2014) %>%
rename(id=Estado) %>%
mutate(indicator = Total_Visitors)
head(sample)
mx <- fortify(mexico, region = "ADMIN_NAME" )
library(ggplot2)
mx <- fortify(mexico, region = "ADMIN_NAME" ) # Convert object to data frame
plotData <- left_join(mx,sample)
gg <- plotData %>%
ggplot(aes(x=long, y=lat, group=group, fill=indicator))+
geom_polygon()+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(), #legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggplotly(gg)
library(ggplot2)
library(plotly)
mx <- fortify(mexico, region = "ADMIN_NAME" ) # Convert object to data frame
plotData <- left_join(mx,sample)
gg <- plotData %>%
ggplot(aes(x=long, y=lat, group=group, fill=indicator))+
geom_polygon()+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(), #legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggplotly(gg)
leaflet(data=mexico)%>%
addProviderTiles()%>%
addPolygons(fillColor = ~pal(Total_Visitors),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = state_popup))
leaflet(data=mexico)%>%
addProviderTiles()%>%
addPolygons(fillColor = ~pal(Total_Visitors),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = state_popup)
leaflet(data=mexico)%>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(fillColor = ~pal(Total_Visitors),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = state_popup)
pal <- colorQuantile("YlGn", NULL, n = 5)
state_popup <- paste0("<strong>Estado: </strong>",
mexico$name,
"<br><strong>PIB per c?pita, miles de pesos, 2008: </strong>",
mexico$gdp08)
leaflet(data=mexico)%>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(fillColor = ~pal(Total_Visitors),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = state_popup)
pal <- colorQuantile("YlGn", NULL, n = 5)
state_popup <- paste0("<strong>Estado: </strong>",
mexico$id,
"<br><strong>PIB per c?pita, miles de pesos, 2008: </strong>",
mexico$Total_Visitors)
leaflet(data=mexico)%>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(fillColor = ~pal(Total_Visitors),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = state_popup)
state_popup <- paste0("<strong>Estado: </strong>",
mexico$id,
"<br><strong>PIB per c?pita, miles de pesos, 2008: </strong>",
mexico$Total_Visitors)
leaflet(data=mexico)%>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(fillColor = ~pal(Total_Visitors),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = state_popup)
state_popup <- paste0("<strong>Estado: </strong>",
mexico$id,
"<br><strong>PIB per c?pita, miles de pesos, 2008: </strong>",
mexico$Total_Visitors)
leaflet(data=mexico)%>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(fillColor = ~pal(Total_Visitors),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = state_popup)
state_popup <- paste0("<strong>Estado: </strong>",
mexico$id,
"<br><strong>PIB per c?pita, miles de pesos, 2008: </strong>",
mexico$Total_Visitors)
leaflet(data=mexico)%>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(fillColor = ~Total_Visitors,
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = state_popup)
state_popup <- paste0("<strong>Estado: </strong>",
mexico$id,
"<br><strong>PIB per c?pita, miles de pesos, 2008: </strong>",
mexico$Total_Visitors)
leaflet(data=mexico)%>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = state_popup)
?addPolygons
state_popup <- paste0("<strong>Estado: </strong>",
mexico$id,
"<br><strong>PIB per c?pita, miles de pesos, 2008: </strong>",
mexico$Total_Visitors)
leaflet(data=mexico)%>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(fillColor = ~pal(Occupation_Pct),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = state_popup)
state_popup <- paste0("<strong>Estado: </strong>",
mexico$id,
"<br><strong>PIB per c?pita, miles de pesos, 2008: </strong>",
mexico$Total_Visitors)
leaflet(data=mexico)%>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(fillColor = ~pal(mexico$Occupation_Pct),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = state_popup)
state_popup <- paste0("<strong>Estado: </strong>",
mexico$id,
"<br><strong>PIB per c?pita, miles de pesos, 2008: </strong>",
mexico$Total_Visitors)
leaflet(data=mexico)%>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(fillColor = ~pal(as.numeric(as.character(mexico$Occupation_Pct))),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = state_popup)
library(rgdal)
library(rgeos)
library(maptools)
## TRENDS BY STATE (Lecture 4)
mexico <- readOGR(dsn="./dashboard_app/",layer ="mexstates", encoding = "UTF-8")
hoteles <- read.csv("./dashboard_app/hoteles.csv")
hoteles[3:9] <- sapply(hoteles[3:9], function(x) as.numeric(as.character(x))/1000)
head(hoteles)
head(mexico@data)
library(ggplot2)
library(plotly)
mx <- fortify(mexico, region = "ADMIN_NAME" ) # Convert object to data frame
plotData <- left_join(mx,sample)
head(plotData)
state_popup <- paste0("<strong>Estado: </strong>",
plotData$id,
"<br><strong>PIB per c?pita, miles de pesos, 2008: </strong>",
plotData$Total_Visitors)
leaflet(data=plotData)%>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(fillColor = ~pal(as.numeric(as.character(mexico$Occupation_Pct))),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = state_popup)
## POZOR: Use mutate_ in Shiny!
hotels2014 <- hoteles%>%
filter(Ano==2014) %>%
rename(id=Estado) %>%
mutate(indicator = Total_Visitors)
head(hotels2014)
mexico@data <- left_join(mexico@data,hotels2014)
head(mexico@data)
?fortify
mexico@data <- left_join(mexico@data,hotels2014, by.x="ADMIN_NAME", by.y="id")
?left_join
mexico@data <- left_join(mexico@data,hotels2014, by= c("ADMIN_NAME", "id"))
mexico@data <- left_join(mexico@data,hotels2014, by= c("ADMIN_NAME", "id"))
names(mexico@data)
mexico@data <- left_join(mexico@data,hotels2014, by= c("ADMIN_NAME"="id"))
state_popup <- paste0("<strong>Estado: </strong>",
plotData$id,
"<br><strong>PIB per c?pita, miles de pesos, 2008: </strong>",
plotData$Total_Visitors)
leaflet(data=mexico)%>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(fillColor = ~pal(as.numeric(as.character(mexico$Occupation_Pct))),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = state_popup)
library(rgdal)
library(rgeos)
library(maptools)
## TRENDS BY STATE (Lecture 4)
mexico <- readOGR(dsn="./dashboard_app/",layer ="mexstates", encoding = "UTF-8")
hoteles <- read.csv("./dashboard_app/hoteles.csv")
hoteles[3:9] <- sapply(hoteles[3:9], function(x) as.numeric(as.character(x))/1000)
head(hoteles)
## POZOR: Use mutate_ in Shiny!
hotels2014 <- hoteles%>%
filter(Ano==2014) %>%
rename(id=Estado) %>%
mutate(indicator = Total_Visitors)
head(hotels2014)
head(mexico@data)
head(mexico@data)
mexico@data <- left_join(mexico@data,hotels2014, by= c("ADMIN_NAME"="id"))
mexico@data <- left_join(mexico@data,hotels2014, by= c("ADMIN_NAME"="id"))
state_popup <- paste0("<strong>Estado: </strong>",
mexico@data$ADMIN_NAME,
"<br><strong>Total Visitors in 2014: </strong>",
mexico@data$Total_Visitors)
leaflet(data=mexico)%>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(fillColor = ~pal(as.numeric(as.character(mexico$Occupation_Pct))),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = state_popup)
mexico@data <- left_join(mexico@data,hotels2014, by= c("ADMIN_NAME"="id"))
state_popup <- paste0("<strong>Estado: </strong>",
mexico@data$ADMIN_NAME,
"<br><strong>Total Visitors in 2014: </strong>",
mexico@data$Total_Visitors)
leaflet(data=mexico)%>%
addProviderTiles("CartoDB.Positron")%>%
addPolygons(fillColor = ~pal(as.numeric(as.character(mexico$Occupation_Pct))),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = state_popup)
library(ggplot2)
library(plotly)
mx <- fortify(mexico, region = "ADMIN_NAME" ) # Convert object to data frame
plotData <- left_join(mx,hotels2014)
head(plotData)
gg <- plotData %>%
ggplot(aes(x=long, y=lat, group=group, fill=indicator))+
geom_polygon()+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(), #legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggplotly(gg)
library(shiny)
library(leaflet)
############################ UI LOGIC ############################
ui <- fluidPage(
leafletOutput("unescoMap"), selectInput("site",
"Select a site",
choices = levels(unesco$name_en),
selected = levels(unesco$name_en)[2]))
############################  SERVER LOGIC ############################
server <- function(input,output,session){
# The standard map we had, no surprises
output$unescoMap <- renderLeaflet({
unesco %>%
leaflet %>% setView(lng = -99.1013, lat = 19.2465, zoom = 5) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(name_en))
})
## A reactive object: filtering out the data from the chosen site
chosenSite <- reactive({
desc <- unesco%>%filter(name_en==input$site)
desc
})
## An observer event for the map: This looks on what has changed on the map and redraws accordingly
observe({
leafletProxy("unescoMap", data=chosenSite())%>%
removeMarker("chosen")%>%
addCircleMarkers(~longitude, ~latitude,
color = "red", stroke = F,
fillOpacity = 0.7,
popup = ~as.character(name_en), layerId = "chosen")
})
}
shinyApp(ui, server)
runApp('~/Downloads/test')
shiny::runApp('~/Cursos/CERGE-Building-Shiny-Apps/Lecture 3 - Shiny/dashboard_app')
install.packages("shinydashboard")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("plotly")
runApp('~/Cursos/CERGE-Building-Shiny-Apps/Lecture 3 - Shiny/dashboard_app')
library(leaflet)
install.packages("leaflet")
library(leaflet)
leaflet %>%
setView(lng=-101.1950 , lat=19.7060, zoom=6)%>%addTiles()
leaflet %>%
setView(lng=-101.1950 , lat=19.7060, zoom=6)%>%addTiles()
leaflet(setView(lng=-101.1950 , lat=19.7060, zoom=6))
