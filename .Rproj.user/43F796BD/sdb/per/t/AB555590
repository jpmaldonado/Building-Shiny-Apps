{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Building Shiny Apps\"\nauthor: \"Pablo Maldonado\"\ndate: ''\noutput:\n  ioslides_presentation: default\n  beamer_presentation: default\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE)\n```\n\n# Quick Intro\n\n## About me:\n\n- PhD Applied Mathematics, Universit√© Pierre et Marie Curie, Paris, France.\n\n- 3+ years experience as Adjunct Professor in Mexico.\n\n- 6+ years experience in mathematical modelling (in one way or another).\n\n- Freelance Data Science Consultant.\n\n- Building Shiny apps for happy clients since 2015.\n\n## This course\n\n- Minimal coherent stack to help you **get things done**.\n\n- NOT a course in web development.\n\n- No previous knowledge assumed.\n\n- **Topics:** \n    - Data manipulation.\n    - Shiny.\n    - Gathering data.\n    - Maps and Graphics. \n    \n\n## Web development\n\nMost web applications consist of three layers that interact with each other.\n\n1. **Front-end**: what the user sees and interacts with (HTML, CSS, Javascript/jQuery).\n\n2. **Middleware**: communicates with the front and back-end\n      - Process HTTP requests.\n      - Connect to the server.\n      - Interact with APIs.\n      - Manage cookies, authentication, sessions.\n\n3. **Back-end**: Data storage, process and analysis.\n\n\n## Why Shiny?\n\n- Get off the ground quickly, using R only.\n- Analysts can easily communicate their results.\n- Good for applications with more algorithms than users.\n- Compatible with other excellent graphics libraries.\n- Used in production!\n\n# R and dplyr\n\n## What is R?\n- Created by NZ Researchers Ross Ihaka and Robert Gentleman in 1991.\n\n- Derived from the S language, developed in the 1950's in Bell Labs. \n\n- Free (both as in \"free beer\" and \"free person\") statistical package.\n\n\n## What is R good for?\n\n- Extensive package library for math and statistics.\n\n- Decent graphic libraries.\n\n- Quick way to build prototypes, and in many cases, production ready applications.\n\n- Good alternative to LaTeX.\n\n- You can also make slides :)\n\n## What is R not so good for?\n\n- Computations that require intensive data crunching.\n\n- Packages don't play well with each other.\n\n- The documentation can be unreadable, in general little attention to good software development practices, which can become annoying.\n\n\n\n\n## What is dplyr?\n- \"A fast, consistent tool for working with data frame like objects, both in memory and out of memory\".\n\n- Created by Hadley Wickham (Rice University/RStudio).\n\n- Part of a suite of very useful packages for data manipulation in R (we'll cover ggplot2 as well).\n\n\n\n# R in a nutshell\n## Basic Syntax\n- The assignment operator is <- \n```{r, echo = TRUE}\nx <- 1\nprint(x)\n```\n\nYou can use \"=\", but \"<-\" is preferred by the R community (shortcut: Alt + - in RStudio) \n\n## Types\n```{r, echo = TRUE}\n# Vectors and types\nx <- c(0.5,0.6) #numeric\nx <- c(T,F) #logical\nx <- c(\"a\",\"b\",\"c\") #character\nx <- c(1+0i,2+4i) #complex\n\n```\n\n\n```{r, echo = TRUE}\n# Compressed notation for vectors with consecutive integers:\n\nx <- 9:29\nprint(x)\n```\n\n## Coercion\n```{r, echo = TRUE}\n# Coercion to types\nx <- 0:6\nclass(x)\n\nas.logical(x)\nas.character(x)\n```\n\n## Not always possible!\n```{r,echo = T}\nx <- c(\"a\",\"b\",\"c\")\nas.numeric(x)\n```\n\n## Special values in R\n- **NA** is used for existing, but useless values.\n- **NaN** is used for undefined values, like 0/0.\n- **NULL** means unexistant value. \n- There's also **Inf** and **-Inf**.\n\n## Example\n```{r, echo=TRUE}\n\nv <- c(1, 2, 3, NA, 5)\nsum(v)\n\n\nv <- c(1, 2, 3, NaN, 5)\nsum(v)\n\n\nv <- c(1, 2, 3, NULL, 5)\nsum(v)\n\n```\n\n## Test for values\n\n```{r, echo = TRUE}\nis.na(5)\nis.na(NaN)\nis.nan(NA)\n\n```\n\n## Factors \n\n```{r, echo = TRUE}\nx <- factor(c(\"yes\",\"no\", \"yes\", \"no\", \"no\"))\nx\n```\n\nFactors are special ways of representing data internally, and they are treated specially by modelling functions.\n\n## Data Frames\n```{r, echo = TRUE}\n\ndf <- data.frame( Weather = c(\"Cold\",\"Mild\",\"Cold\",\"Ok\")\n               , Cities = c(\"Prague\", \"Brno\", \"Ostrava\", \"Zlin\")\n               )\ndf\n\n```\n\n##Loading and inspecting \n```{r, echo=TRUE}\nnews<-read.csv(\".././data/OnlineNewsPopularity/OnlineNewsPopularity.csv\")\n\nsmall <- news[2:5]\nhead(small) # Too many columns\n\n```\n\n----\n```{r,echo=T}\ntail(small, n = 3)\nsummary(small)\n```\n\n----\n```{r, echo=T}\n\ntable(news$data_channel_is_lifestyle)\ntable(news$data_channel_is_lifestyle, news$data_channel_is_bus)\n\n# Try table(news$data_channel_is_lifestyle, \n# news$data_channel_is_entertainment, news$data_channel_is_bus) !\n```\n\n\n## Histograms\n```{r, echo=T}\n\nhist(small$n_tokens_title)\n\n```\n\n## Boxplots\n\n```{r, echo=T}\nboxplot(small$n_tokens_title)\n```\n\n\n\n# dplyr\n## A grammar for data manipulation\ndplyr provides a function for each basic action with data: \n\n- filter() (and slice())\n- arrange()\n- select() (and rename())\n- distinct()\n- mutate() (and transmute())\n- summarise()\n- sample_n() (and sample_frac())\n\nwhich can do many things together with the \"%>%\" (read \"and then\")\n\n\n## Loading dplyr\n```{r, echo = TRUE}\nlibrary(dplyr)\n```\n\n\n## Example: filter()\n```{r, echo = TRUE}\n# Filter the articles from a specific day\noldest <- filter(small, timedelta == 731 )\nhead(oldest, n = 2)\n\n```\n\n## Example: filter() (cont.)\nor, using the operator %>%:\n\n```{r, echo = TRUE}\nsmall %>% filter(timedelta==731) %>% head(n=2)\n```\n\nIn pure R (without dplyr), we can do\n\n```{r, echo = TRUE}\noldest <- small[small$timedelta==731,]\nhead(oldest, n = 2 )\n```\n\n## Example: slice()\n\nslice() filters rows by position, for instance:\n```{r, echo = TRUE}\n\nslice(small, 16:20)\n\n```\n\n## Example: arrange()\n\narrange() orders columns and helps to break ties.\n\n```{r, echo = TRUE}\n\nsmall %>%\n  arrange(timedelta, n_tokens_title, n_tokens_content) %>% \n  head(n=3)\n\n```\n\n\n## Example: arrange() (cont.)\nWe can use desc() to arrange a column in descending order.\n\n```{r, echo = TRUE}\nsmall %>% \n  arrange(desc(timedelta), n_tokens_title, n_tokens_content) %>% \n  head(n=3)\n```\n\n\n## Example: select()\n\nWe can use select to, well, select specific columns:\n\n```{r, echo = TRUE}\n\nsmall %>% select(timedelta,n_tokens_content) %>% head(n=2)\n\n```\n\n\n```{r, echo = TRUE}\nsmall %>% select(-c(n_tokens_title,n_tokens_content)) %>% head(n=2)\n\n```\n\n## Example: select() (cont.)\nWe can use select() also to rename columns\n```{r, echo = TRUE}\nsmall %>% select(words_in_title = n_tokens_title) %>% head(n=3)\n```\n\n## Example: rename()\nThis is useful to rename a column without dropping the other variables\n\n```{r, echo=TRUE}\n\nsmall %>% rename(words_in_title = n_tokens_title) %>% head(n=3)\n```\n\n## Example: distinct()\n\nThis function allows us to find unique values in a table\n```{r, echo=TRUE}\nsmall %>% distinct(timedelta) %>% head(n=3)\n\n```\n\n```{r, echo=TRUE}\nsmall %>% distinct(timedelta,n_tokens_title) %>% nrow\n\n```\n\n## Example: mutate()\nSometimes we need to add new columns that are function of existing columns, for instance:\n\n```{r, echo=TRUE}\nsmall %>% \n  mutate(title_to_content = n_tokens_title/n_tokens_content\n         ,total_unique = n_tokens_content * n_unique_tokens ) %>% \n  head(n=3)\n\n```\n\n## Example: mutate() (cont.)\nWe can recycle newly created variables!\n\n```{r, echo=TRUE}\nsmall %>% \n  mutate(title_to_content = n_tokens_title/n_tokens_content\n         ,percentage = round(100*title_to_content,2) ) %>% \n  head(n=3)\n\n```\n\n\n## Example: transmute()\nLike mutate(), but keeps only the newly created variables\n\n\n```{r, echo=TRUE}\nsmall %>% \n  transmute(title_to_content = n_tokens_title/n_tokens_content\n         ,total_unique = n_tokens_content * n_unique_tokens ) %>% \n  head(n=3)\n\n```\n\n\n## Sampling: sample_n() and sample_frac()\nThese two functions allow us to sample randomly a fixed number of rows or a fraction. Use replace = TRUE for a sample with replacement, and you can add weights for the sampling if needed. More info in ?sample_n\n\n## Grouping functions\n\nAll the functions above become really useful when we can apply them to groups.\n\n\n```{r, echo=TRUE}\ngps <- news %>% \n  sample_frac(.1)%>%\n  group_by(data_channel_is_lifestyle\n          ,data_channel_is_world)%>%\n  summarise(count=n()\n            ,avg_imgs = mean(num_imgs, na.rm = TRUE)\n            , avg_videos =mean(num_videos, na.rm = TRUE)) \n\n```\n\n## Plotting the final results\n\n```{r, echo=TRUE}\nbarplot(gps$avg_imgs\n        , names.arg = c(\"Other\", \"Lifestyle\", \"World\")\n        , main = \"Average number of images\")\n```\n\n\n## Another useful plot \n\n```{r, echo = TRUE}\nplot(news$timedelta,news$shares\n     , type='l', main = \"Number of shares across time\"\n     , xlab = \"Days since acquisition\", ylab = \"Number of shares\")\n\n```\n\n## Hands-on\n\nTry it yourselves! Let's test some hypothesis:\n\n- What are the 5 most shared articles?\n- Which channel (among the six described) has the largest average number of shares? does it change across time?\n- Which day has the most shares, on average?\n\n\n## What are the 5 most shared articles?\n\n```{r, echo=TRUE}\nnews %>% arrange(desc(shares)) %>% select(url,shares) %>% head(n=5)\n```\n\n\n\n\n## Which channel has the largest number of shares?\n\n```{r, echo=TRUE}\nex2a <- news %>% \n  group_by(data_channel_is_lifestyle\n  , data_channel_is_entertainment\n  , data_channel_is_bus\n  , data_channel_is_socmed\n  , data_channel_is_tech\n  , data_channel_is_world)%>% \n  summarise(avg_shares = mean(shares))\n  \n```\n## ... and the plot:\n\n```{r, echo=TRUE}\nbarplot(ex2a$avg_shares,\n        names.arg =c(\"Other\",\"LS\",\"Ent\",\"Bus\",\"SM\",\"Tech\",\"World\"))\n\n\n```\n\n## Does it change with time?\n\n```{r, echo=TRUE}\nex2b <- news %>% filter(data_channel_is_world ==1) \n\nplot(ex2b$timedelta,ex2b$shares\n     , type='l', main = \"Number of shares across time- World\"\n     , xlab = \"Days since acquisition\", ylab = \"Number of shares\")\n\n```\n\n## Which day has the most shares, on average?\n\n```{r, echo=TRUE}\nex3 <- news %>% \n  group_by(weekday_is_monday\n  , weekday_is_tuesday\n  , weekday_is_wednesday\n  , weekday_is_thursday\n  , weekday_is_friday\n  , weekday_is_saturday\n  , weekday_is_sunday)%>% \n  summarise(avg_shares = mean(shares))\n```\n\n## and the plot:\n```{r,echo = TRUE}\n  \nbarplot(ex3$avg_shares,\n        names.arg =c(\"Mon\", \"Tue\",'Wed', \"Thu\", \"Fri\", \"Sat\", \"Sun\"))\n\n\n```\n\n",
    "created" : 1500644809909.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1004620130",
    "id" : "AB555590",
    "lastKnownWriteTime" : 1500646520,
    "last_content_update" : 1500646520091,
    "path" : "C:/Users/pc/Google Drive/MALDONADO CONSULTING SRO/CURSOS/Building-Shiny-Apps/Lecture 1 - R and dplyr/Lecture01.Rmd",
    "project_path" : "Lecture 1 - R and dplyr/Lecture01.Rmd",
    "properties" : {
        "last_setup_crc32" : ""
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}